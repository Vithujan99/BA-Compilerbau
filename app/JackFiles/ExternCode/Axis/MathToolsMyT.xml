<tokens>
<keyword> class </keyword>
<identifier> MathTools </identifier>
<symbol> { </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> lengthOf </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> s </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> s </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> s </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> s </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> s </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> s </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> s </identifier>
<symbol> = </symbol>
<identifier> s </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> length </identifier>
<symbol> = </symbol>
<identifier> length </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> length </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> strToInt </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<identifier> str </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> from </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> intValue </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> currentChar </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> sign </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> from </identifier>
<symbol> &lt; </symbol>
<identifier> str </identifier>
<symbol> . </symbol>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> from </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> intValue </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sign </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> str </identifier>
<symbol> . </symbol>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<identifier> from </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 45 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> sign </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> str </identifier>
<symbol> . </symbol>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> currentChar </identifier>
<symbol> = </symbol>
<identifier> str </identifier>
<symbol> . </symbol>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> currentChar </identifier>
<symbol> &gt; </symbol>
<integerConstant> 47 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> currentChar </identifier>
<symbol> &lt; </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> intValue </identifier>
<symbol> = </symbol>
<identifier> intValue </identifier>
<symbol> * </symbol>
<integerConstant> 10 </integerConstant>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> currentChar </identifier>
<symbol> - </symbol>
<integerConstant> 48 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> str </identifier>
<symbol> . </symbol>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> sign </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> intValue </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> intValue </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> intValue </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> sin10 </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> denominator </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<integerConstant> 158 </integerConstant>
<symbol> * </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<integerConstant> 2000 </integerConstant>
<symbol> / </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<identifier> denominator </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 6 </integerConstant>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> / </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<identifier> denominator </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> denominator </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<integerConstant> 315 </integerConstant>
<symbol> * </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> sin10 </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 315 </integerConstant>
<symbol> * </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> denominator </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<integerConstant> 629 </integerConstant>
<symbol> * </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> - </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> sin10 </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 315 </integerConstant>
<symbol> * </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> denominator </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> sin10 </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<integerConstant> 629 </integerConstant>
<symbol> * </symbol>
<identifier> denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> denominator </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> breakMath </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 511 </integerConstant>
<symbol> , </symbol>
<integerConstant> 255 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 3 </integerConstant>
<symbol> , </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> * </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant>    Komm Bauer, wir retten die Mathematik und vernichten Europa!  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>