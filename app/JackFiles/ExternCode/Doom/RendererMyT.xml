<tokens>
<keyword> class </keyword>
<identifier> Renderer </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> cache </identifier>
<symbol> , </symbol>
<identifier> cache2 </identifier>
<symbol> , </symbol>
<identifier> depthBuffer </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> i2 </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> init </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cache </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cache2 </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> cache2 </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 512 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> reset </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> tmp </identifier>
<symbol> , </symbol>
<identifier> tmp2 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i2 </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<identifier> i2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp2 </identifier>
<symbol> = </symbol>
<identifier> cache2 </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp2 </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp2 </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp2 </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp2 </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 512 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> drawMesh </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> z </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> width </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> depth </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> vlz1 </identifier>
<symbol> , </symbol>
<identifier> vlz2 </identifier>
<symbol> , </symbol>
<identifier> x1 </identifier>
<symbol> , </symbol>
<identifier> x2 </identifier>
<symbol> , </symbol>
<identifier> ii </identifier>
<symbol> , </symbol>
<identifier> tmpZ </identifier>
<symbol> , </symbol>
<identifier> dir </identifier>
<symbol> , </symbol>
<identifier> tmpX1 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> tmpArr </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> started </identifier>
<symbol> , </symbol>
<identifier> render </identifier>
<symbol> , </symbol>
<identifier> z1O </identifier>
<symbol> , </symbol>
<identifier> z2O </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> render </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z1O </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z2O </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> vlz1 </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 200 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> vlz2 </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> + </symbol>
<identifier> depth </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 200 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> vlz1 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz1 </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z1O </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> vlz2 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz2 </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z2O </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<identifier> vlz1 </identifier>
<symbol> + </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> vlz2 </identifier>
<symbol> + </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmpX1 </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz1 </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> - </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &gt; </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz1 </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> - </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> - </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<integerConstant> 506 </integerConstant>
<symbol> - </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmpX1 </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz2 </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> - </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> tmpX1 </identifier>
<symbol> - </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> - </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &gt; </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmpX1 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz2 </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<identifier> tmpX1 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> width </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<integerConstant> 506 </integerConstant>
<symbol> - </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &gt; </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmpX1 </identifier>
<symbol> &gt; </symbol>
<integerConstant> 506 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmpX1 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> render </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> vlz1 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz1 </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z1O </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> vlz2 </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> vlz2 </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z2O </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> render </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> started </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dir </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &lt; </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> dir </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> z1O </identifier>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &lt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> &lt; </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> ii </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> z1O </identifier>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &gt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> &lt; </symbol>
<integerConstant> 510 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> ii </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> z2O </identifier>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &lt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> x2 </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> &lt; </symbol>
<integerConstant> 510 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> ii </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> z2O </identifier>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> &gt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> &lt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> ii </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &gt; </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> &lt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> &lt; </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> &gt; </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> started </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> started </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmpZ </identifier>
<symbol> = </symbol>
<identifier> vlz1 </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> vlz2 </identifier>
<symbol> - </symbol>
<identifier> vlz1 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Renderer </identifier>
<symbol> . </symbol>
<identifier> startMesh </identifier>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> , </symbol>
<identifier> tmpZ </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> started </identifier>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> started </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmpZ </identifier>
<symbol> = </symbol>
<identifier> vlz1 </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> - </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> vlz2 </identifier>
<symbol> - </symbol>
<identifier> vlz1 </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Renderer </identifier>
<symbol> . </symbol>
<identifier> endMesh </identifier>
<symbol> ( </symbol>
<identifier> ii </identifier>
<symbol> , </symbol>
<identifier> tmpZ </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> started </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> depthBuffer </identifier>
<symbol> [ </symbol>
<identifier> ii </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ii </identifier>
<symbol> = </symbol>
<identifier> ii </identifier>
<symbol> + </symbol>
<identifier> dir </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> started </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Renderer </identifier>
<symbol> . </symbol>
<identifier> endMesh </identifier>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> , </symbol>
<identifier> vlz2 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> startMesh </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> tmp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> c </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> endMesh </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> tmp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> * </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1260 </integerConstant>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> z </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 126 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> clearPaint </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> tmp </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<identifier> i2 </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache2 </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 512 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 512 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> , </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> , </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> , </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> paint </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> pass </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Array </identifier>
<identifier> tmp </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> pass </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> cache </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 512 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 512 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> , </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> , </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> , </symbol>
<identifier> tmp </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> j </identifier>
<symbol> = </symbol>
<identifier> j </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>