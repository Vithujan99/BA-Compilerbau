<tokens>
<keyword> class </keyword>
<identifier> AxisGame </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> currentPlayer </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> winner </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> map </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Player </identifier>
<identifier> player1 </identifier>
<symbol> , </symbol>
<identifier> player2 </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> AxisGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> map </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 63 </integerConstant>
<symbol> * </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<integerConstant> 63 </integerConstant>
<symbol> * </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> map </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> generateObstacle </identifier>
<symbol> ( </symbol>
<integerConstant> 30 </integerConstant>
<symbol> , </symbol>
<integerConstant> 15 </integerConstant>
<symbol> , </symbol>
<integerConstant> 8 </integerConstant>
<symbol> , </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> generateObstacle </identifier>
<symbol> ( </symbol>
<integerConstant> 91 </integerConstant>
<symbol> , </symbol>
<integerConstant> 42 </integerConstant>
<symbol> , </symbol>
<integerConstant> 13 </integerConstant>
<symbol> , </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> player1 </identifier>
<symbol> = </symbol>
<identifier> Player </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> , </symbol>
<integerConstant> 18 </integerConstant>
<symbol> , </symbol>
<identifier> map </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> player2 </identifier>
<symbol> = </symbol>
<identifier> Player </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 120 </integerConstant>
<symbol> , </symbol>
<integerConstant> 29 </integerConstant>
<symbol> , </symbol>
<identifier> map </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentPlayer </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> winner </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> drawmap </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> player1 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> player2 </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawmap </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> row </identifier>
<symbol> , </symbol>
<identifier> col </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> col </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> &lt; </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> row </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &lt; </symbol>
<integerConstant> 63 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<identifier> map </identifier>
<symbol> [ </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> * </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> row </identifier>
<symbol> = </symbol>
<identifier> row </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> col </identifier>
<symbol> = </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> drawFunction </identifier>
<symbol> ( </symbol>
<identifier> String </identifier>
<identifier> f </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x3 </identifier>
<symbol> , </symbol>
<identifier> x2 </identifier>
<symbol> , </symbol>
<identifier> x1 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x3Denominator </identifier>
<symbol> , </symbol>
<identifier> x2Denominator </identifier>
<symbol> , </symbol>
<identifier> x1Denominator </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> outerCoefSin </identifier>
<symbol> , </symbol>
<identifier> outerDenominatorSin </identifier>
<symbol> , </symbol>
<identifier> innerCoefSin </identifier>
<symbol> , </symbol>
<identifier> innerDenominatorSin </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> currentCoefficient </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> currentDenominator </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> currentPower </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> originX </identifier>
<symbol> , </symbol>
<identifier> originY </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x3Denominator </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2Denominator </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1Denominator </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> outerDenominatorSin </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> innerDenominatorSin </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentDenominator </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> currentCoefficient </identifier>
<symbol> = </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> strToInt </identifier>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> lengthOf </identifier>
<symbol> ( </symbol>
<identifier> currentCoefficient </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Unsupported expression, sry :(((   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 47 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentDenominator </identifier>
<symbol> = </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> strToInt </identifier>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> lengthOf </identifier>
<symbol> ( </symbol>
<identifier> currentDenominator </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> currentDenominator </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> breakMath </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> drawmap </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Unsupported expression, sry :((   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 88 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentPower </identifier>
<symbol> = </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> strToInt </identifier>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> currentPower </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x3 </identifier>
<symbol> = </symbol>
<identifier> currentCoefficient </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x3Denominator </identifier>
<symbol> = </symbol>
<identifier> currentDenominator </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> currentPower </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x2 </identifier>
<symbol> = </symbol>
<identifier> currentCoefficient </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x2Denominator </identifier>
<symbol> = </symbol>
<identifier> currentDenominator </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> currentPower </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x1 </identifier>
<symbol> = </symbol>
<identifier> currentCoefficient </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x1Denominator </identifier>
<symbol> = </symbol>
<identifier> currentDenominator </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Unsupported power, sry :(   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> currentPower </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> currentDenominator </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> lengthOf </identifier>
<symbol> ( </symbol>
<identifier> currentPower </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 83 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> innerCoefSin </identifier>
<symbol> = </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> strToInt </identifier>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> lengthOf </identifier>
<symbol> ( </symbol>
<identifier> innerCoefSin </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> innerDenominatorSin </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 47 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> innerDenominatorSin </identifier>
<symbol> = </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> strToInt </identifier>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> lengthOf </identifier>
<symbol> ( </symbol>
<identifier> innerDenominatorSin </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> innerDenominatorSin </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> breakMath </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> drawmap </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> outerCoefSin </identifier>
<symbol> = </symbol>
<identifier> currentCoefficient </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> outerDenominatorSin </identifier>
<symbol> = </symbol>
<identifier> currentDenominator </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentDenominator </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Unsupported expression, sry :(   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printChar </identifier>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> . </symbol>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> currentPlayer </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> originX </identifier>
<symbol> = </symbol>
<identifier> player1 </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originY </identifier>
<symbol> = </symbol>
<identifier> player1 </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> originX </identifier>
<symbol> = </symbol>
<identifier> player2 </identifier>
<symbol> . </symbol>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originY </identifier>
<symbol> = </symbol>
<identifier> player2 </identifier>
<symbol> . </symbol>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> x3 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> /  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> x3Denominator </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> x^3+  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> x2 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> /  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> x2Denominator </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> x^2+  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> x1 </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> /  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> x1Denominator </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> x+  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> outerCoefSin </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> /  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> outerDenominatorSin </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> sin(  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> innerCoefSin </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> /  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> innerDenominatorSin </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> x)  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> originX </identifier>
<symbol> + </symbol>
<identifier> Player </identifier>
<symbol> . </symbol>
<identifier> getLength </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> originY </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> * </symbol>
<identifier> x3 </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<identifier> x3Denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> * </symbol>
<identifier> x2 </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<identifier> x2Denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> * </symbol>
<identifier> x1 </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> / </symbol>
<identifier> x1Denominator </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> outerCoefSin </identifier>
<symbol> * </symbol>
<identifier> MathTools </identifier>
<symbol> . </symbol>
<identifier> sin10 </identifier>
<symbol> ( </symbol>
<identifier> innerCoefSin </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> innerDenominatorSin </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> outerDenominatorSin </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> drawPointIfFree </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> destroy </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> currentPlayer </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> player2 </identifier>
<symbol> . </symbol>
<identifier> collides </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> winner </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> player1 </identifier>
<symbol> . </symbol>
<identifier> collides </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> winner </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<integerConstant> 500 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> drawPointIfFree </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> col </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &lt; </symbol>
<integerConstant> 63 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> &lt; </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> map </identifier>
<symbol> [ </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> * </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 4 </integerConstant>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<integerConstant> 63 </integerConstant>
<symbol> + </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> destroy </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> col </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &lt; </symbol>
<integerConstant> 63 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> &lt; </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> map </identifier>
<symbol> [ </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> * </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> turn </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> col </identifier>
<symbol> , </symbol>
<identifier> row </identifier>
<symbol> , </symbol>
<identifier> tmp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentPlayer </identifier>
<symbol> = </symbol>
<symbol> ~ </symbol>
<identifier> currentPlayer </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> col </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> row </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &lt; </symbol>
<integerConstant> 63 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> map </identifier>
<symbol> [ </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> * </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> map </identifier>
<symbol> [ </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> * </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> map </identifier>
<symbol> [ </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> - </symbol>
<identifier> col </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> * </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> map </identifier>
<symbol> [ </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> - </symbol>
<identifier> col </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> * </symbol>
<identifier> row </identifier>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> tmp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> row </identifier>
<symbol> = </symbol>
<identifier> row </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> col </identifier>
<symbol> = </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> player1 </identifier>
<symbol> . </symbol>
<identifier> turn </identifier>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> player2 </identifier>
<symbol> . </symbol>
<identifier> turn </identifier>
<symbol> ( </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> valid </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> f </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> valid </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> valid </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> f </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readLine </identifier>
<symbol> ( </symbol>
<stringConstant> f(x) =   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> valid </identifier>
<symbol> = </symbol>
<identifier> drawFunction </identifier>
<symbol> ( </symbol>
<identifier> f </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> winner </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant>    The winner is player   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> winner </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> .  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Press any key to play again, ESC to exit.  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> readChar </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 140 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> drawmap </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> turn </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> drawmap </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> generateObstacle </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> w </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> row </identifier>
<symbol> , </symbol>
<identifier> col </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> w </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> col </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> col </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> w </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> row </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> &lt; </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> map </identifier>
<symbol> [ </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> row </identifier>
<symbol> * </symbol>
<integerConstant> 127 </integerConstant>
<symbol> ) </symbol>
<symbol> ] </symbol>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> row </identifier>
<symbol> = </symbol>
<identifier> row </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> col </identifier>
<symbol> = </symbol>
<identifier> col </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>