<tokens>
<keyword> class </keyword>
<identifier> WallGame </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> POV </identifier>
<symbol> , </symbol>
<identifier> HALF_POV </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> PROJECTIONPLANEHEIGHT </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> MAX_INT </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> distProjectionPlane </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> Trig </identifier>
<identifier> trig </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> xStepTable </identifier>
<symbol> , </symbol>
<identifier> yStepTable </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Map </identifier>
<identifier> map </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> px </identifier>
<symbol> , </symbol>
<identifier> py </identifier>
<symbol> , </symbol>
<identifier> pArc </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> lastCast </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> WallGame </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> POV </identifier>
<symbol> = </symbol>
<integerConstant> 60 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> HALF_POV </identifier>
<symbol> = </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> PROJECTIONPLANEHEIGHT </identifier>
<symbol> = </symbol>
<integerConstant> 240 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distProjectionPlane </identifier>
<symbol> = </symbol>
<integerConstant> 8000 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> MAX_INT </identifier>
<symbol> = </symbol>
<integerConstant> 32767 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> TILE_SIZE </identifier>
<symbol> = </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> trig </identifier>
<symbol> = </symbol>
<identifier> Trig </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> initStepTable </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> lastCast </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> POV </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> map </identifier>
<symbol> = </symbol>
<identifier> Level </identifier>
<symbol> . </symbol>
<identifier> level1 </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> px </identifier>
<symbol> = </symbol>
<integerConstant> 72 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> py </identifier>
<symbol> = </symbol>
<integerConstant> 72 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> pArc </identifier>
<symbol> = </symbol>
<integerConstant> 110 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawPlayer </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> a </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> px </identifier>
<symbol> + </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawCircle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> py </identifier>
<symbol> , </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> pArc </identifier>
<symbol> - </symbol>
<identifier> HALF_POV </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> + </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> py </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> py </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> sin </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> pArc </identifier>
<symbol> + </symbol>
<identifier> HALF_POV </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> &lt; </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> a </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> - </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> py </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> , </symbol>
<identifier> py </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> sin </identifier>
<symbol> ( </symbol>
<identifier> a </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveForwards </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> n </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> px </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> py </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> sin </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> isWall </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> px </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> py </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveLeft </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> n </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> px </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> sin </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> py </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> isWall </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> px </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> py </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveBackwards </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> n </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> px </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> py </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> sin </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> isWall </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> px </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> py </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> moveRight </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> n </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> px </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> sin </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> py </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> n </identifier>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> isWall </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> px </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> py </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> false </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> rotateLeft </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> n </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> pArc </identifier>
<symbol> = </symbol>
<identifier> pArc </identifier>
<symbol> - </symbol>
<identifier> n </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> pArc </identifier>
<symbol> = </symbol>
<identifier> pArc </identifier>
<symbol> + </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> rotateRight </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> n </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> pArc </identifier>
<symbol> = </symbol>
<identifier> pArc </identifier>
<symbol> + </symbol>
<identifier> n </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> pArc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> pArc </identifier>
<symbol> = </symbol>
<identifier> pArc </identifier>
<symbol> - </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawGrid </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 256 </integerConstant>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<integerConstant> 511 </integerConstant>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 511 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> i </identifier>
<symbol> , </symbol>
<integerConstant> 255 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawRay </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &gt; </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> &lt; </symbol>
<integerConstant> 256 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 255 </integerConstant>
<symbol> + </symbol>
<identifier> px </identifier>
<symbol> , </symbol>
<identifier> py </identifier>
<symbol> , </symbol>
<integerConstant> 255 </integerConstant>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> castToVerticalWall </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> verticalGrid </identifier>
<symbol> , </symbol>
<identifier> distNextVerticalGrid </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> yIntersection </identifier>
<symbol> , </symbol>
<identifier> distVerticalHit </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> xGridIndex </identifier>
<symbol> , </symbol>
<identifier> yGridIndex </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> hitWall </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 90 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> &gt; </symbol>
<integerConstant> 270 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> verticalGrid </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> px </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distNextVerticalGrid </identifier>
<symbol> = </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> verticalGrid </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> px </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distNextVerticalGrid </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> yIntersection </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> tan </identifier>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> verticalGrid </identifier>
<symbol> - </symbol>
<identifier> px </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> FIX_POINT </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> py </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> = </symbol>
<integerConstant> 90 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> = </symbol>
<integerConstant> 270 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> distVerticalHit </identifier>
<symbol> = </symbol>
<identifier> MAX_INT </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> hitWall </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> hitWall </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xGridIndex </identifier>
<symbol> = </symbol>
<identifier> verticalGrid </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> yGridIndex </identifier>
<symbol> = </symbol>
<identifier> yIntersection </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> xGridIndex </identifier>
<symbol> &lt; </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> width </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> yGridIndex </identifier>
<symbol> &lt; </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> height </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> verticalGrid </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> yIntersection </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> hitWall </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distVerticalHit </identifier>
<symbol> = </symbol>
<identifier> MAX_INT </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> isWall </identifier>
<symbol> ( </symbol>
<identifier> xGridIndex </identifier>
<symbol> , </symbol>
<identifier> yGridIndex </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> hitWall </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distVerticalHit </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> verticalGrid </identifier>
<symbol> - </symbol>
<identifier> px </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> FIX_POINT </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> yIntersection </identifier>
<symbol> = </symbol>
<identifier> yIntersection </identifier>
<symbol> + </symbol>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> castArc </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> verticalGrid </identifier>
<symbol> = </symbol>
<identifier> verticalGrid </identifier>
<symbol> + </symbol>
<identifier> distNextVerticalGrid </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> distVerticalHit </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> castToHorizontalWall </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> horizontalGrid </identifier>
<symbol> , </symbol>
<identifier> distNextHorizontalGrid </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> xIntersection </identifier>
<symbol> , </symbol>
<identifier> distHorizontalHit </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> xGridIndex </identifier>
<symbol> , </symbol>
<identifier> yGridIndex </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> hitWall </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 180 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> horizontalGrid </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> py </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distNextHorizontalGrid </identifier>
<symbol> = </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> horizontalGrid </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> py </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distNextHorizontalGrid </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> xIntersection </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> itan </identifier>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> horizontalGrid </identifier>
<symbol> - </symbol>
<identifier> py </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> FIX_POINT </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> px </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> = </symbol>
<integerConstant> 180 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> distHorizontalHit </identifier>
<symbol> = </symbol>
<identifier> MAX_INT </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> hitWall </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> hitWall </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xGridIndex </identifier>
<symbol> = </symbol>
<identifier> xIntersection </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> yGridIndex </identifier>
<symbol> = </symbol>
<identifier> horizontalGrid </identifier>
<symbol> / </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> xGridIndex </identifier>
<symbol> &lt; </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> width </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> yGridIndex </identifier>
<symbol> &lt; </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> height </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> xIntersection </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> horizontalGrid </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> hitWall </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distHorizontalHit </identifier>
<symbol> = </symbol>
<identifier> MAX_INT </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> isWall </identifier>
<symbol> ( </symbol>
<identifier> xGridIndex </identifier>
<symbol> , </symbol>
<identifier> yGridIndex </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> hitWall </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distHorizontalHit </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> horizontalGrid </identifier>
<symbol> - </symbol>
<identifier> py </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> FIX_POINT </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> sin </identifier>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xIntersection </identifier>
<symbol> = </symbol>
<identifier> xIntersection </identifier>
<symbol> + </symbol>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> castArc </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> horizontalGrid </identifier>
<symbol> = </symbol>
<identifier> horizontalGrid </identifier>
<symbol> + </symbol>
<identifier> distNextHorizontalGrid </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> distHorizontalHit </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> drawWallSlice </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> column </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> dist </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> projectedWallHeight </identifier>
<symbol> , </symbol>
<identifier> topOfWall </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> dist </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> projectedWallHeight </identifier>
<symbol> = </symbol>
<identifier> PROJECTIONPLANEHEIGHT </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> projectedWallHeight </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> min </identifier>
<symbol> ( </symbol>
<identifier> distProjectionPlane </identifier>
<symbol> / </symbol>
<identifier> dist </identifier>
<symbol> , </symbol>
<identifier> PROJECTIONPLANEHEIGHT </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> topOfWall </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> PROJECTIONPLANEHEIGHT </identifier>
<symbol> - </symbol>
<identifier> projectedWallHeight </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> column </identifier>
<symbol> = </symbol>
<identifier> column </identifier>
<symbol> * </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> projectedWallHeight </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<identifier> column </identifier>
<symbol> , </symbol>
<identifier> topOfWall </identifier>
<symbol> , </symbol>
<identifier> column </identifier>
<symbol> , </symbol>
<identifier> topOfWall </identifier>
<symbol> + </symbol>
<identifier> projectedWallHeight </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> render </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> castColumn </identifier>
<symbol> , </symbol>
<identifier> castArc </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> distHorizontalHit </identifier>
<symbol> , </symbol>
<identifier> distVerticalHit </identifier>
<symbol> , </symbol>
<identifier> dist </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> hitWall </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> castArc </identifier>
<symbol> = </symbol>
<identifier> pArc </identifier>
<symbol> - </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> castArc </identifier>
<symbol> = </symbol>
<integerConstant> 360 </integerConstant>
<symbol> + </symbol>
<identifier> castArc </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> castColumn </identifier>
<symbol> &lt; </symbol>
<identifier> POV </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> distHorizontalHit </identifier>
<symbol> = </symbol>
<identifier> castToHorizontalWall </identifier>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> distVerticalHit </identifier>
<symbol> = </symbol>
<identifier> castToVerticalWall </identifier>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> castColumn </identifier>
<symbol> &lt; </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> dist </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> castColumn </identifier>
<symbol> - </symbol>
<integerConstant> 30 </integerConstant>
<symbol> + </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> min </identifier>
<symbol> ( </symbol>
<identifier> distHorizontalHit </identifier>
<symbol> , </symbol>
<identifier> distVerticalHit </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> dist </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> cos </identifier>
<symbol> ( </symbol>
<identifier> castColumn </identifier>
<symbol> - </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> min </identifier>
<symbol> ( </symbol>
<identifier> distHorizontalHit </identifier>
<symbol> , </symbol>
<identifier> distVerticalHit </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> lastCast </identifier>
<symbol> [ </symbol>
<identifier> castColumn </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> dist </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> drawWallSlice </identifier>
<symbol> ( </symbol>
<identifier> castColumn </identifier>
<symbol> , </symbol>
<identifier> dist </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> castColumn </identifier>
<symbol> = </symbol>
<identifier> castColumn </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> castArc </identifier>
<symbol> = </symbol>
<identifier> castArc </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> castArc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> castArc </identifier>
<symbol> = </symbol>
<identifier> castArc </identifier>
<symbol> - </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> blankWalls </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> POV </identifier>
<symbol> * </symbol>
<integerConstant> 4 </integerConstant>
<symbol> , </symbol>
<identifier> PROJECTIONPLANEHEIGHT </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> draw </identifier>
<symbol> ( </symbol>
<keyword> false </keyword>
<symbol> , </symbol>
<integerConstant> 256 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> drawPlayer </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> blankWalls </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> render </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> exit </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> map </identifier>
<symbol> . </symbol>
<identifier> draw </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> , </symbol>
<integerConstant> 256 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 22 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant> Move: Arrow keys   Rotate: v,b  </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<identifier> exit </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 81 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> exit </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> moveLeft </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 131 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> moveForwards </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> moveRight </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 133 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> moveBackwards </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> rotateLeft </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> rotateRight </identifier>
<symbol> ( </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> initStepTable </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> arc </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> xStepTable </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> yStepTable </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> arc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> * </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> itan </identifier>
<symbol> ( </symbol>
<identifier> arc </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> FIX_POINT </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> arc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 90 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> arc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 270 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> xStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> TILE_SIZE </identifier>
<symbol> * </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> tan </identifier>
<symbol> ( </symbol>
<identifier> arc </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<identifier> trig </identifier>
<symbol> . </symbol>
<identifier> FIX_POINT </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> arc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> arc </identifier>
<symbol> &lt; </symbol>
<integerConstant> 180 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> yStepTable </identifier>
<symbol> [ </symbol>
<identifier> arc </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> arc </identifier>
<symbol> = </symbol>
<identifier> arc </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>