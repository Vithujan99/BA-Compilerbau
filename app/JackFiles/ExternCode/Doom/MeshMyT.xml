<tokens>
<keyword> class </keyword>
<identifier> Mesh </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<identifier> Array </identifier>
<identifier> cos </identifier>
<symbol> , </symbol>
<identifier> sin </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> z </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> originalX </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> originalZ </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> width </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> depth </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> originalWidth </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> originalDepth </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> rotation </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> id </identifier>
<symbol> ; </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> createCos </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 61 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 14 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 17 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 18 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 19 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 49 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 21 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 22 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 23 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 24 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 26 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 27 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 28 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 29 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 31 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 33 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 34 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 35 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 36 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 37 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 38 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 39 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 41 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 42 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 43 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 44 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 45 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 46 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 47 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 48 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 49 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 51 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 52 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 53 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 54 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 55 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 56 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 57 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 59 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cos </identifier>
<symbol> [ </symbol>
<integerConstant> 60 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> createSin </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 61 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 49 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 8 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 9 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 13 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 14 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 17 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 18 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 19 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 21 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 22 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 23 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 24 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 25 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 49 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 26 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 27 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 28 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 29 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 31 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 32 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 33 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 34 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 35 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 36 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 37 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 38 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 39 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 41 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 42 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 43 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 44 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 45 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 46 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 99 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 47 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 97 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 48 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 95 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 49 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 91 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 86 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 51 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 80 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 52 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 74 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 53 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 66 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 54 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 55 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 56 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 40 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 57 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 30 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 59 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<symbol> - </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sin </identifier>
<symbol> [ </symbol>
<integerConstant> 60 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> constructor </keyword>
<identifier> Mesh </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> pX </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> pZ </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> pWidth </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> pDepth </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> pId </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> pX </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z </identifier>
<symbol> = </symbol>
<identifier> pZ </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originalX </identifier>
<symbol> = </symbol>
<identifier> pX </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originalZ </identifier>
<symbol> = </symbol>
<identifier> pZ </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> width </identifier>
<symbol> = </symbol>
<identifier> pWidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> depth </identifier>
<symbol> = </symbol>
<identifier> pDepth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originalWidth </identifier>
<symbol> = </symbol>
<identifier> pWidth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originalDepth </identifier>
<symbol> = </symbol>
<identifier> pDepth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> id </identifier>
<symbol> = </symbol>
<identifier> pId </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> print </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> id </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<stringConstant>  :   </stringConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> minZ </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> boolean </keyword>
<identifier> stuckInWall </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> + </symbol>
<identifier> depth </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> + </symbol>
<identifier> depth </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> width </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> minZ </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> tmp </identifier>
<symbol> , </symbol>
<identifier> tmpX </identifier>
<symbol> , </symbol>
<identifier> tmpZ </identifier>
<symbol> , </symbol>
<identifier> tmpWidth </identifier>
<symbol> , </symbol>
<identifier> tmpDepth </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmpX </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmpZ </identifier>
<symbol> = </symbol>
<identifier> z </identifier>
<symbol> / </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmpWidth </identifier>
<symbol> = </symbol>
<identifier> width </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmpDepth </identifier>
<symbol> = </symbol>
<identifier> depth </identifier>
<symbol> / </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> tmp </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> sqrt </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmpX </identifier>
<symbol> * </symbol>
<identifier> tmpX </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> tmpZ </identifier>
<symbol> * </symbol>
<identifier> tmpZ </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> tmp </identifier>
<symbol> + </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> sqrt </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmpX </identifier>
<symbol> + </symbol>
<identifier> tmpWidth </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> tmpX </identifier>
<symbol> + </symbol>
<identifier> tmpWidth </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> tmpZ </identifier>
<symbol> + </symbol>
<identifier> tmpDepth </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<symbol> ( </symbol>
<identifier> tmpZ </identifier>
<symbol> + </symbol>
<identifier> tmpDepth </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> translate </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> dx </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> dz </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> cosA </identifier>
<symbol> , </symbol>
<identifier> sinA </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cosA </identifier>
<symbol> = </symbol>
<identifier> cos </identifier>
<symbol> [ </symbol>
<symbol> ( </symbol>
<integerConstant> 360 </integerConstant>
<symbol> - </symbol>
<identifier> rotation </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sinA </identifier>
<symbol> = </symbol>
<identifier> sin </identifier>
<symbol> [ </symbol>
<symbol> ( </symbol>
<integerConstant> 360 </integerConstant>
<symbol> - </symbol>
<identifier> rotation </identifier>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originalX </identifier>
<symbol> = </symbol>
<identifier> originalX </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> cosA </identifier>
<symbol> * </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> sinA </identifier>
<symbol> * </symbol>
<identifier> dz </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> originalZ </identifier>
<symbol> = </symbol>
<identifier> originalZ </identifier>
<symbol> + </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> sinA </identifier>
<symbol> * </symbol>
<identifier> dx </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> cosA </identifier>
<symbol> * </symbol>
<identifier> dz </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> applyRotation </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> rotate </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> rot </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> rotation </identifier>
<symbol> = </symbol>
<identifier> rotation </identifier>
<symbol> + </symbol>
<identifier> rot </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> rotation </identifier>
<symbol> &gt; </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> rotation </identifier>
<symbol> = </symbol>
<identifier> rotation </identifier>
<symbol> - </symbol>
<integerConstant> 360 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> rotation </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> rotation </identifier>
<symbol> = </symbol>
<integerConstant> 360 </integerConstant>
<symbol> + </symbol>
<identifier> rotation </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> applyRotation </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> applyRotation </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> cosA </identifier>
<symbol> , </symbol>
<identifier> sinA </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> cosA </identifier>
<symbol> = </symbol>
<identifier> cos </identifier>
<symbol> [ </symbol>
<identifier> rotation </identifier>
<symbol> / </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> sinA </identifier>
<symbol> = </symbol>
<identifier> sin </identifier>
<symbol> [ </symbol>
<identifier> rotation </identifier>
<symbol> / </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> width </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> cosA </identifier>
<symbol> * </symbol>
<identifier> originalWidth </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> sinA </identifier>
<symbol> * </symbol>
<identifier> originalDepth </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> depth </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> sinA </identifier>
<symbol> * </symbol>
<identifier> originalWidth </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> cosA </identifier>
<symbol> * </symbol>
<identifier> originalDepth </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> cosA </identifier>
<symbol> * </symbol>
<identifier> originalX </identifier>
<symbol> ) </symbol>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> sinA </identifier>
<symbol> * </symbol>
<identifier> originalZ </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> z </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> sinA </identifier>
<symbol> * </symbol>
<identifier> originalX </identifier>
<symbol> ) </symbol>
<symbol> + </symbol>
<symbol> ( </symbol>
<identifier> cosA </identifier>
<symbol> * </symbol>
<identifier> originalZ </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> / </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> + </symbol>
<identifier> depth </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> z </identifier>
<symbol> + </symbol>
<identifier> depth </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Renderer </identifier>
<symbol> . </symbol>
<identifier> drawMesh </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> z </identifier>
<symbol> , </symbol>
<identifier> width </identifier>
<symbol> , </symbol>
<identifier> depth </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>