<tokens>
<keyword> class </keyword>
<identifier> TileSet </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> Tiles </identifier>
<symbol> ; </symbol>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> TileLength </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> TileSet </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> counter </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> TileLength </identifier>
<symbol> = </symbol>
<integerConstant> 23 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> Tiles </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> TileLength </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> counter </identifier>
<symbol> &lt; </symbol>
<identifier> TileLength </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> Tiles </identifier>
<symbol> [ </symbol>
<identifier> counter </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> Tile </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> counter </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> counter </identifier>
<symbol> = </symbol>
<identifier> counter </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> Tile </identifier>
<identifier> getTile </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Tile </identifier>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<identifier> TileLength </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> Tiles </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> Tiles </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> getTileLength </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> TileLength </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> counter </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Tile </identifier>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> counter </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> counter </identifier>
<symbol> &lt; </symbol>
<integerConstant> 50 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> t </identifier>
<symbol> = </symbol>
<identifier> Tiles </identifier>
<symbol> [ </symbol>
<identifier> counter </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> t </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> counter </identifier>
<symbol> = </symbol>
<identifier> counter </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> print </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Tile </identifier>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> t </identifier>
<symbol> = </symbol>
<identifier> Tiles </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> t </identifier>
<symbol> . </symbol>
<identifier> print </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> t </identifier>
<symbol> = </symbol>
<identifier> Tiles </identifier>
<symbol> [ </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ] </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> t </identifier>
<symbol> . </symbol>
<identifier> print </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>